<?xml version="1.0" encoding="utf-8"?>
<!--
为什么使用RealitiveLayout？
在上一节中我们对LinearLayout进行了详细的解析，
LinearLayout也是我们 用的比较多的一个布局,我们更多的时候更钟情于他的weight(权重)属性，
等比例划分，对屏幕适配还是 帮助蛮大的;但是使用LinearLayout的时候也有一个问题，就是当界面比较复杂的时候，
需要嵌套多层的 LinearLayout,这样就会降低UI Render的效率(渲染速度),而且如果是listview或者GridView上的 item,效率会更低
,另外太多层LinearLayout嵌套会占用更多的系统资源,还有可能引发stackoverflow;
但是如果我们使用RelativeLayout的话,可能仅仅需要一层就可以完成了,以父容器或者兄弟组件参考+margin +padding就可以设置组件的显示位置
,是比较方便的!当然,也不是绝对的,具体问题具体分析吧! 总结就是:尽量使用RelativeLayout + LinearLayout的weight属性搭配使用吧！
-->
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:id="@+id/layout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:clickable="true"
        android:gravity="center"
        android:text="Menu"
        android:orientation="vertical">
        <Button
            android:layout_width="wrap_content"
            android:layout_height="match_parent"
            android:text = "menu">
        </Button>
           <!--com.example.ballfloat.manager.operation.Operation
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="20dp" / -->

    </LinearLayout>
</RelativeLayout>